*** This is not a valid schema file. It's merely here to document the JSON structure for a schema file.***
{
	"label": # A string representing the label of a node to be defined
	{
		"description": "A string describing the node type. Optional",
		"requiredProperties": # This is optional. It can also exist and have a length of 0. If absent, the node will still be required to have any properties that other assigned labels may call for.
		{
			"name": # A string representing the name of a property
			{
				"validator":	"A string representing the name of the validator you want to use. The validator doesn't actually validate that Neo4j will take the property value, just that it meets the criteria the developer has defined. Developer is responsible for passing a value that can ultimately be cast to one of the neo4j types (http://neo4j.com/docs/stable/graphdb-neo4j-properties.html). Required key.",
				"description":	"A description of the property. Must be a string if it exsits. Optional."
			},
		},
		"validRelations": # This is optional. It can also exist and have a length of 0. If absent, the node will still be limited to a union of relation types that other assigned labels have specified.
		{
			"type": # A string representing the type an allowed outbound relation. If this key is empty, any node can be a target of this relation - but the union limitation still applies.
			{
				"label": # A string representing a label of a valid target node for the parent relation type. Resulting dict can be empty if there are no required properties for the relation to a particular node. More union requirement.
				{
					"name": # A string representing the name of a required property for the relation
					{
						"validator": "Property validator - same as for node properties",
						"description": "Optional string to describe what this relation property is for"
					}
				},
			},
		}
	},
}
